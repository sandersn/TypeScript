=== tests/cases/compiler/sourceMapValidationDestructuringForArrayBindingPattern2.ts ===
declare var console: {
>console : { log(msg: any): void; }

    log(msg: any): void;
>log : (msg: any) => void
>msg : any
}
type Robot = [number, string, string];
>Robot : [number, string, string]

type MultiSkilledRobot = [string, [string, string]];
>MultiSkilledRobot : [string, [string, string]]

let robotA: Robot = [1, "mower", "mowing"];
>robotA : [number, string, string]
>Robot : [number, string, string]
>[1, "mower", "mowing"] : [number, string, string]
>1 : number
>"mower" : string
>"mowing" : string

function getRobot() {
>getRobot : () => [number, string, string]

    return robotA;
>robotA : [number, string, string]
}

let multiRobotA: MultiSkilledRobot = ["mower", ["mowing", ""]];
>multiRobotA : [string, [string, string]]
>MultiSkilledRobot : [string, [string, string]]
>["mower", ["mowing", ""]] : [string, [string, string]]
>"mower" : string
>["mowing", ""] : [string, string]
>"mowing" : string
>"" : string

let multiRobotB: MultiSkilledRobot = ["trimmer", ["trimming", "edging"]];
>multiRobotB : [string, [string, string]]
>MultiSkilledRobot : [string, [string, string]]
>["trimmer", ["trimming", "edging"]] : [string, [string, string]]
>"trimmer" : string
>["trimming", "edging"] : [string, string]
>"trimming" : string
>"edging" : string

function getMultiRobot() {
>getMultiRobot : () => [string, [string, string]]

    return multiRobotA;
>multiRobotA : [string, [string, string]]
}

let nameA: string, primarySkillA: string, secondarySkillA: string;
>nameA : string
>primarySkillA : string
>secondarySkillA : string

let numberB: number, nameB: string;
>numberB : number
>nameB : string

let numberA2: number, nameA2: string, skillA2: string, nameMA: string;
>numberA2 : number
>nameA2 : string
>skillA2 : string
>nameMA : string

let numberA3: number, robotAInfo: (number | string)[], multiRobotAInfo: (string | [string, string])[];
>numberA3 : number
>robotAInfo : (number | string)[]
>multiRobotAInfo : (string | [string, string])[]

let i: number;
>i : number

for ([, nameA] = robotA, i = 0; i < 1; i++) {
>[, nameA] = robotA, i = 0 : number
>[, nameA] = robotA : [number, string, string]
>[, nameA] : [undefined, string]
> : undefined
>nameA : string
>robotA : [number, string, string]
>i = 0 : number
>i : number
>0 : number
>i < 1 : boolean
>i : number
>1 : number
>i++ : number
>i : number

    console.log(nameA);
>console.log(nameA) : void
>console.log : (msg: any) => void
>console : { log(msg: any): void; }
>log : (msg: any) => void
>nameA : string
}
for ([, nameA] = getRobot(), i = 0; i < 1; i++) {
>[, nameA] = getRobot(), i = 0 : number
>[, nameA] = getRobot() : [number, string, string]
>[, nameA] : [undefined, string]
> : undefined
>nameA : string
>getRobot() : [number, string, string]
>getRobot : () => [number, string, string]
>i = 0 : number
>i : number
>0 : number
>i < 1 : boolean
>i : number
>1 : number
>i++ : number
>i : number

    console.log(nameA);
>console.log(nameA) : void
>console.log : (msg: any) => void
>console : { log(msg: any): void; }
>log : (msg: any) => void
>nameA : string
}
for ([, nameA] = [2, "trimmer", "trimming"], i = 0; i < 1; i++) {
>[, nameA] = [2, "trimmer", "trimming"], i = 0 : number
>[, nameA] = [2, "trimmer", "trimming"] : [number, string, string]
>[, nameA] : [undefined, string]
> : undefined
>nameA : string
>[2, "trimmer", "trimming"] : [number, string, string]
>2 : number
>"trimmer" : string
>"trimming" : string
>i = 0 : number
>i : number
>0 : number
>i < 1 : boolean
>i : number
>1 : number
>i++ : number
>i : number

    console.log(nameA);
>console.log(nameA) : void
>console.log : (msg: any) => void
>console : { log(msg: any): void; }
>log : (msg: any) => void
>nameA : string
}
for ([, [primarySkillA, secondarySkillA]] = multiRobotA, i = 0; i < 1; i++) {
>[, [primarySkillA, secondarySkillA]] = multiRobotA, i = 0 : number
>[, [primarySkillA, secondarySkillA]] = multiRobotA : [string, [string, string]]
>[, [primarySkillA, secondarySkillA]] : [undefined, [string, string]]
> : undefined
>[primarySkillA, secondarySkillA] : [string, string]
>primarySkillA : string
>secondarySkillA : string
>multiRobotA : [string, [string, string]]
>i = 0 : number
>i : number
>0 : number
>i < 1 : boolean
>i : number
>1 : number
>i++ : number
>i : number

    console.log(primarySkillA);
>console.log(primarySkillA) : void
>console.log : (msg: any) => void
>console : { log(msg: any): void; }
>log : (msg: any) => void
>primarySkillA : string
}
for ([, [primarySkillA, secondarySkillA]] = getMultiRobot(), i = 0; i < 1; i++) {
>[, [primarySkillA, secondarySkillA]] = getMultiRobot(), i = 0 : number
>[, [primarySkillA, secondarySkillA]] = getMultiRobot() : [string, [string, string]]
>[, [primarySkillA, secondarySkillA]] : [undefined, [string, string]]
> : undefined
>[primarySkillA, secondarySkillA] : [string, string]
>primarySkillA : string
>secondarySkillA : string
>getMultiRobot() : [string, [string, string]]
>getMultiRobot : () => [string, [string, string]]
>i = 0 : number
>i : number
>0 : number
>i < 1 : boolean
>i : number
>1 : number
>i++ : number
>i : number

    console.log(primarySkillA);
>console.log(primarySkillA) : void
>console.log : (msg: any) => void
>console : { log(msg: any): void; }
>log : (msg: any) => void
>primarySkillA : string
}
for ([, [primarySkillA, secondarySkillA]] = ["trimmer", ["trimming", "edging"]], i = 0; i < 1; i++) {
>[, [primarySkillA, secondarySkillA]] = ["trimmer", ["trimming", "edging"]], i = 0 : number
>[, [primarySkillA, secondarySkillA]] = ["trimmer", ["trimming", "edging"]] : [string, [string, string]]
>[, [primarySkillA, secondarySkillA]] : [undefined, [string, string]]
> : undefined
>[primarySkillA, secondarySkillA] : [string, string]
>primarySkillA : string
>secondarySkillA : string
>["trimmer", ["trimming", "edging"]] : [string, [string, string]]
>"trimmer" : string
>["trimming", "edging"] : [string, string]
>"trimming" : string
>"edging" : string
>i = 0 : number
>i : number
>0 : number
>i < 1 : boolean
>i : number
>1 : number
>i++ : number
>i : number

    console.log(primarySkillA);
>console.log(primarySkillA) : void
>console.log : (msg: any) => void
>console : { log(msg: any): void; }
>log : (msg: any) => void
>primarySkillA : string
}

for ([numberB] = robotA, i = 0; i < 1; i++) {
>[numberB] = robotA, i = 0 : number
>[numberB] = robotA : [number, string, string]
>[numberB] : [number]
>numberB : number
>robotA : [number, string, string]
>i = 0 : number
>i : number
>0 : number
>i < 1 : boolean
>i : number
>1 : number
>i++ : number
>i : number

    console.log(numberB);
>console.log(numberB) : void
>console.log : (msg: any) => void
>console : { log(msg: any): void; }
>log : (msg: any) => void
>numberB : number
}
for ([numberB] = getRobot(), i = 0; i < 1; i++) {
>[numberB] = getRobot(), i = 0 : number
>[numberB] = getRobot() : [number, string, string]
>[numberB] : [number]
>numberB : number
>getRobot() : [number, string, string]
>getRobot : () => [number, string, string]
>i = 0 : number
>i : number
>0 : number
>i < 1 : boolean
>i : number
>1 : number
>i++ : number
>i : number

    console.log(numberB);
>console.log(numberB) : void
>console.log : (msg: any) => void
>console : { log(msg: any): void; }
>log : (msg: any) => void
>numberB : number
}
for ([numberB] = [2, "trimmer", "trimming"], i = 0; i < 1; i++) {
>[numberB] = [2, "trimmer", "trimming"], i = 0 : number
>[numberB] = [2, "trimmer", "trimming"] : [number, string, string]
>[numberB] : [number]
>numberB : number
>[2, "trimmer", "trimming"] : [number, string, string]
>2 : number
>"trimmer" : string
>"trimming" : string
>i = 0 : number
>i : number
>0 : number
>i < 1 : boolean
>i : number
>1 : number
>i++ : number
>i : number

    console.log(numberB);
>console.log(numberB) : void
>console.log : (msg: any) => void
>console : { log(msg: any): void; }
>log : (msg: any) => void
>numberB : number
}
for ([nameB] = multiRobotA, i = 0; i < 1; i++) {
>[nameB] = multiRobotA, i = 0 : number
>[nameB] = multiRobotA : [string, [string, string]]
>[nameB] : [string]
>nameB : string
>multiRobotA : [string, [string, string]]
>i = 0 : number
>i : number
>0 : number
>i < 1 : boolean
>i : number
>1 : number
>i++ : number
>i : number

    console.log(nameB);
>console.log(nameB) : void
>console.log : (msg: any) => void
>console : { log(msg: any): void; }
>log : (msg: any) => void
>nameB : string
}
for ([nameB] = getMultiRobot(), i = 0; i < 1; i++) {
>[nameB] = getMultiRobot(), i = 0 : number
>[nameB] = getMultiRobot() : [string, [string, string]]
>[nameB] : [string]
>nameB : string
>getMultiRobot() : [string, [string, string]]
>getMultiRobot : () => [string, [string, string]]
>i = 0 : number
>i : number
>0 : number
>i < 1 : boolean
>i : number
>1 : number
>i++ : number
>i : number

    console.log(nameB);
>console.log(nameB) : void
>console.log : (msg: any) => void
>console : { log(msg: any): void; }
>log : (msg: any) => void
>nameB : string
}
for ([nameB] = ["trimmer", ["trimming", "edging"]], i = 0; i < 1; i++) {
>[nameB] = ["trimmer", ["trimming", "edging"]], i = 0 : number
>[nameB] = ["trimmer", ["trimming", "edging"]] : [string, string[]]
>[nameB] : [string]
>nameB : string
>["trimmer", ["trimming", "edging"]] : [string, string[]]
>"trimmer" : string
>["trimming", "edging"] : string[]
>"trimming" : string
>"edging" : string
>i = 0 : number
>i : number
>0 : number
>i < 1 : boolean
>i : number
>1 : number
>i++ : number
>i : number

    console.log(nameB);
>console.log(nameB) : void
>console.log : (msg: any) => void
>console : { log(msg: any): void; }
>log : (msg: any) => void
>nameB : string
}

for ([numberA2, nameA2, skillA2] = robotA, i = 0; i < 1; i++) {
>[numberA2, nameA2, skillA2] = robotA, i = 0 : number
>[numberA2, nameA2, skillA2] = robotA : [number, string, string]
>[numberA2, nameA2, skillA2] : [number, string, string]
>numberA2 : number
>nameA2 : string
>skillA2 : string
>robotA : [number, string, string]
>i = 0 : number
>i : number
>0 : number
>i < 1 : boolean
>i : number
>1 : number
>i++ : number
>i : number

    console.log(nameA2);
>console.log(nameA2) : void
>console.log : (msg: any) => void
>console : { log(msg: any): void; }
>log : (msg: any) => void
>nameA2 : string
}
for ([numberA2, nameA2, skillA2] = getRobot(), i = 0; i < 1; i++) {
>[numberA2, nameA2, skillA2] = getRobot(), i = 0 : number
>[numberA2, nameA2, skillA2] = getRobot() : [number, string, string]
>[numberA2, nameA2, skillA2] : [number, string, string]
>numberA2 : number
>nameA2 : string
>skillA2 : string
>getRobot() : [number, string, string]
>getRobot : () => [number, string, string]
>i = 0 : number
>i : number
>0 : number
>i < 1 : boolean
>i : number
>1 : number
>i++ : number
>i : number

    console.log(nameA2);
>console.log(nameA2) : void
>console.log : (msg: any) => void
>console : { log(msg: any): void; }
>log : (msg: any) => void
>nameA2 : string
}
for ([numberA2, nameA2, skillA2] = [2, "trimmer", "trimming"], i = 0; i < 1; i++) {
>[numberA2, nameA2, skillA2] = [2, "trimmer", "trimming"], i = 0 : number
>[numberA2, nameA2, skillA2] = [2, "trimmer", "trimming"] : [number, string, string]
>[numberA2, nameA2, skillA2] : [number, string, string]
>numberA2 : number
>nameA2 : string
>skillA2 : string
>[2, "trimmer", "trimming"] : [number, string, string]
>2 : number
>"trimmer" : string
>"trimming" : string
>i = 0 : number
>i : number
>0 : number
>i < 1 : boolean
>i : number
>1 : number
>i++ : number
>i : number

    console.log(nameA2);
>console.log(nameA2) : void
>console.log : (msg: any) => void
>console : { log(msg: any): void; }
>log : (msg: any) => void
>nameA2 : string
}
for ([nameMA, [primarySkillA, secondarySkillA]] = multiRobotA, i = 0; i < 1; i++) {
>[nameMA, [primarySkillA, secondarySkillA]] = multiRobotA, i = 0 : number
>[nameMA, [primarySkillA, secondarySkillA]] = multiRobotA : [string, [string, string]]
>[nameMA, [primarySkillA, secondarySkillA]] : [string, [string, string]]
>nameMA : string
>[primarySkillA, secondarySkillA] : [string, string]
>primarySkillA : string
>secondarySkillA : string
>multiRobotA : [string, [string, string]]
>i = 0 : number
>i : number
>0 : number
>i < 1 : boolean
>i : number
>1 : number
>i++ : number
>i : number

    console.log(nameMA);
>console.log(nameMA) : void
>console.log : (msg: any) => void
>console : { log(msg: any): void; }
>log : (msg: any) => void
>nameMA : string
}
for ([nameMA, [primarySkillA, secondarySkillA]] = getMultiRobot(), i = 0; i < 1; i++) {
>[nameMA, [primarySkillA, secondarySkillA]] = getMultiRobot(), i = 0 : number
>[nameMA, [primarySkillA, secondarySkillA]] = getMultiRobot() : [string, [string, string]]
>[nameMA, [primarySkillA, secondarySkillA]] : [string, [string, string]]
>nameMA : string
>[primarySkillA, secondarySkillA] : [string, string]
>primarySkillA : string
>secondarySkillA : string
>getMultiRobot() : [string, [string, string]]
>getMultiRobot : () => [string, [string, string]]
>i = 0 : number
>i : number
>0 : number
>i < 1 : boolean
>i : number
>1 : number
>i++ : number
>i : number

    console.log(nameMA);
>console.log(nameMA) : void
>console.log : (msg: any) => void
>console : { log(msg: any): void; }
>log : (msg: any) => void
>nameMA : string
}
for ([nameMA, [primarySkillA, secondarySkillA]] = ["trimmer", ["trimming", "edging"]], i = 0; i < 1; i++) {
>[nameMA, [primarySkillA, secondarySkillA]] = ["trimmer", ["trimming", "edging"]], i = 0 : number
>[nameMA, [primarySkillA, secondarySkillA]] = ["trimmer", ["trimming", "edging"]] : [string, [string, string]]
>[nameMA, [primarySkillA, secondarySkillA]] : [string, [string, string]]
>nameMA : string
>[primarySkillA, secondarySkillA] : [string, string]
>primarySkillA : string
>secondarySkillA : string
>["trimmer", ["trimming", "edging"]] : [string, [string, string]]
>"trimmer" : string
>["trimming", "edging"] : [string, string]
>"trimming" : string
>"edging" : string
>i = 0 : number
>i : number
>0 : number
>i < 1 : boolean
>i : number
>1 : number
>i++ : number
>i : number

    console.log(nameMA);
>console.log(nameMA) : void
>console.log : (msg: any) => void
>console : { log(msg: any): void; }
>log : (msg: any) => void
>nameMA : string
}

for ([numberA3, ...robotAInfo] = robotA, i = 0; i < 1; i++) {
>[numberA3, ...robotAInfo] = robotA, i = 0 : number
>[numberA3, ...robotAInfo] = robotA : [number, string, string]
>[numberA3, ...robotAInfo] : (number | string)[]
>numberA3 : number
>...robotAInfo : number | string
>robotAInfo : (number | string)[]
>robotA : [number, string, string]
>i = 0 : number
>i : number
>0 : number
>i < 1 : boolean
>i : number
>1 : number
>i++ : number
>i : number

    console.log(numberA3);
>console.log(numberA3) : void
>console.log : (msg: any) => void
>console : { log(msg: any): void; }
>log : (msg: any) => void
>numberA3 : number
}
for ([numberA3, ...robotAInfo] = getRobot(), i = 0; i < 1; i++) {
>[numberA3, ...robotAInfo] = getRobot(), i = 0 : number
>[numberA3, ...robotAInfo] = getRobot() : [number, string, string]
>[numberA3, ...robotAInfo] : (number | string)[]
>numberA3 : number
>...robotAInfo : number | string
>robotAInfo : (number | string)[]
>getRobot() : [number, string, string]
>getRobot : () => [number, string, string]
>i = 0 : number
>i : number
>0 : number
>i < 1 : boolean
>i : number
>1 : number
>i++ : number
>i : number

    console.log(numberA3);
>console.log(numberA3) : void
>console.log : (msg: any) => void
>console : { log(msg: any): void; }
>log : (msg: any) => void
>numberA3 : number
}
for ([numberA3, ...robotAInfo] = <Robot>[2, "trimmer", "trimming"], i = 0; i < 1; i++) {
>[numberA3, ...robotAInfo] = <Robot>[2, "trimmer", "trimming"], i = 0 : number
>[numberA3, ...robotAInfo] = <Robot>[2, "trimmer", "trimming"] : [number, string, string]
>[numberA3, ...robotAInfo] : (number | string)[]
>numberA3 : number
>...robotAInfo : number | string
>robotAInfo : (number | string)[]
><Robot>[2, "trimmer", "trimming"] : [number, string, string]
>Robot : [number, string, string]
>[2, "trimmer", "trimming"] : [number, string, string]
>2 : number
>"trimmer" : string
>"trimming" : string
>i = 0 : number
>i : number
>0 : number
>i < 1 : boolean
>i : number
>1 : number
>i++ : number
>i : number

    console.log(numberA3);
>console.log(numberA3) : void
>console.log : (msg: any) => void
>console : { log(msg: any): void; }
>log : (msg: any) => void
>numberA3 : number
}
for ([...multiRobotAInfo] = multiRobotA, i = 0; i < 1; i++) {
>[...multiRobotAInfo] = multiRobotA, i = 0 : number
>[...multiRobotAInfo] = multiRobotA : [string, [string, string]]
>[...multiRobotAInfo] : (string | [string, string])[]
>...multiRobotAInfo : string | [string, string]
>multiRobotAInfo : (string | [string, string])[]
>multiRobotA : [string, [string, string]]
>i = 0 : number
>i : number
>0 : number
>i < 1 : boolean
>i : number
>1 : number
>i++ : number
>i : number

    console.log(multiRobotAInfo);
>console.log(multiRobotAInfo) : void
>console.log : (msg: any) => void
>console : { log(msg: any): void; }
>log : (msg: any) => void
>multiRobotAInfo : (string | [string, string])[]
}
for ([...multiRobotAInfo] = getMultiRobot(), i = 0; i < 1; i++) {
>[...multiRobotAInfo] = getMultiRobot(), i = 0 : number
>[...multiRobotAInfo] = getMultiRobot() : [string, [string, string]]
>[...multiRobotAInfo] : (string | [string, string])[]
>...multiRobotAInfo : string | [string, string]
>multiRobotAInfo : (string | [string, string])[]
>getMultiRobot() : [string, [string, string]]
>getMultiRobot : () => [string, [string, string]]
>i = 0 : number
>i : number
>0 : number
>i < 1 : boolean
>i : number
>1 : number
>i++ : number
>i : number

    console.log(multiRobotAInfo);
>console.log(multiRobotAInfo) : void
>console.log : (msg: any) => void
>console : { log(msg: any): void; }
>log : (msg: any) => void
>multiRobotAInfo : (string | [string, string])[]
}
for ([...multiRobotAInfo] = <MultiSkilledRobot>["trimmer", ["trimming", "edging"]], i = 0; i < 1; i++) {
>[...multiRobotAInfo] = <MultiSkilledRobot>["trimmer", ["trimming", "edging"]], i = 0 : number
>[...multiRobotAInfo] = <MultiSkilledRobot>["trimmer", ["trimming", "edging"]] : [string, [string, string]]
>[...multiRobotAInfo] : (string | [string, string])[]
>...multiRobotAInfo : string | [string, string]
>multiRobotAInfo : (string | [string, string])[]
><MultiSkilledRobot>["trimmer", ["trimming", "edging"]] : [string, [string, string]]
>MultiSkilledRobot : [string, [string, string]]
>["trimmer", ["trimming", "edging"]] : [string, [string, string]]
>"trimmer" : string
>["trimming", "edging"] : [string, string]
>"trimming" : string
>"edging" : string
>i = 0 : number
>i : number
>0 : number
>i < 1 : boolean
>i : number
>1 : number
>i++ : number
>i : number

    console.log(multiRobotAInfo);
>console.log(multiRobotAInfo) : void
>console.log : (msg: any) => void
>console : { log(msg: any): void; }
>log : (msg: any) => void
>multiRobotAInfo : (string | [string, string])[]
}
