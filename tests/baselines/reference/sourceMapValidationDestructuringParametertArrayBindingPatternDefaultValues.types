=== tests/cases/compiler/sourceMapValidationDestructuringParametertArrayBindingPatternDefaultValues.ts ===
declare var console: {
>console : { log(msg: any): void; }

    log(msg: any): void;
>log : (msg: any) => void
>msg : any
}
type Robot = [number, string, string];
>Robot : [number, string, string]

var robotA: Robot = [1, "mower", "mowing"];
>robotA : [number, string, string]
>Robot : [number, string, string]
>[1, "mower", "mowing"] : [number, string, string]
>1 : number
>"mower" : string
>"mowing" : string

function foo1([, nameA = "noName"]: Robot = [-1, "name", "skill"]) {
>foo1 : ([, nameA = "noName"]?: [number, string, string]) => void
> : undefined
>nameA : string
>"noName" : string
>Robot : [number, string, string]
>[-1, "name", "skill"] : [number, string, string]
>-1 : number
>1 : number
>"name" : string
>"skill" : string

    console.log(nameA);
>console.log(nameA) : void
>console.log : (msg: any) => void
>console : { log(msg: any): void; }
>log : (msg: any) => void
>nameA : string
}

function foo2([numberB = -1]: Robot = [-1, "name", "skill"]) {
>foo2 : ([numberB = -1]?: [number, string, string]) => void
>numberB : number
>-1 : number
>1 : number
>Robot : [number, string, string]
>[-1, "name", "skill"] : [number, string, string]
>-1 : number
>1 : number
>"name" : string
>"skill" : string

    console.log(numberB);
>console.log(numberB) : void
>console.log : (msg: any) => void
>console : { log(msg: any): void; }
>log : (msg: any) => void
>numberB : number
}

function foo3([numberA2 = -1, nameA2 = "name", skillA2 = "skill"]: Robot = [-1, "name", "skill"]) {
>foo3 : ([numberA2 = -1, nameA2 = "name", skillA2 = "skill"]?: [number, string, string]) => void
>numberA2 : number
>-1 : number
>1 : number
>nameA2 : string
>"name" : string
>skillA2 : string
>"skill" : string
>Robot : [number, string, string]
>[-1, "name", "skill"] : [number, string, string]
>-1 : number
>1 : number
>"name" : string
>"skill" : string

    console.log(nameA2);
>console.log(nameA2) : void
>console.log : (msg: any) => void
>console : { log(msg: any): void; }
>log : (msg: any) => void
>nameA2 : string
}

function foo4([numberA3 = -1, ...robotAInfo]: Robot = [-1, "name", "skill"]) {
>foo4 : ([numberA3 = -1, ...robotAInfo]?: [number, string, string]) => void
>numberA3 : number
>-1 : number
>1 : number
>robotAInfo : (number | string)[]
>Robot : [number, string, string]
>[-1, "name", "skill"] : [number, string, string]
>-1 : number
>1 : number
>"name" : string
>"skill" : string

    console.log(robotAInfo);
>console.log(robotAInfo) : void
>console.log : (msg: any) => void
>console : { log(msg: any): void; }
>log : (msg: any) => void
>robotAInfo : (number | string)[]
}

foo1(robotA);
>foo1(robotA) : void
>foo1 : ([, nameA = "noName"]?: [number, string, string]) => void
>robotA : [number, string, string]

foo1([2, "trimmer", "trimming"]);
>foo1([2, "trimmer", "trimming"]) : void
>foo1 : ([, nameA = "noName"]?: [number, string, string]) => void
>[2, "trimmer", "trimming"] : [number, string, string]
>2 : number
>"trimmer" : string
>"trimming" : string

foo2(robotA);
>foo2(robotA) : void
>foo2 : ([numberB = -1]?: [number, string, string]) => void
>robotA : [number, string, string]

foo2([2, "trimmer", "trimming"]);
>foo2([2, "trimmer", "trimming"]) : void
>foo2 : ([numberB = -1]?: [number, string, string]) => void
>[2, "trimmer", "trimming"] : [number, string, string]
>2 : number
>"trimmer" : string
>"trimming" : string

foo3(robotA);
>foo3(robotA) : void
>foo3 : ([numberA2 = -1, nameA2 = "name", skillA2 = "skill"]?: [number, string, string]) => void
>robotA : [number, string, string]

foo3([2, "trimmer", "trimming"]);
>foo3([2, "trimmer", "trimming"]) : void
>foo3 : ([numberA2 = -1, nameA2 = "name", skillA2 = "skill"]?: [number, string, string]) => void
>[2, "trimmer", "trimming"] : [number, string, string]
>2 : number
>"trimmer" : string
>"trimming" : string

foo4(robotA);
>foo4(robotA) : void
>foo4 : ([numberA3 = -1, ...robotAInfo]?: [number, string, string]) => void
>robotA : [number, string, string]

foo4([2, "trimmer", "trimming"]);
>foo4([2, "trimmer", "trimming"]) : void
>foo4 : ([numberA3 = -1, ...robotAInfo]?: [number, string, string]) => void
>[2, "trimmer", "trimming"] : [number, string, string]
>2 : number
>"trimmer" : string
>"trimming" : string

